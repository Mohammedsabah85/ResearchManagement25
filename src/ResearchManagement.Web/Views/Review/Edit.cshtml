@model ResearchManagement.Web.Models.ViewModels.Review.CreateReviewViewModel
@{
    ViewData["Title"] = "تعديل المراجعة";
}

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h2><i class="fas fa-edit me-2 text-primary"></i>تعديل المراجعة</h2>
            <p class="text-muted">تعديل وتحديث تقييم ومراجعة البحث العلمي</p>
        </div>
        <div class="col-md-4 text-end">
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-right me-2"></i>العودة للقائمة
            </a>
            <a asp-action="Details" asp-route-id="@Model.Research.Id" class="btn btn-outline-info">
                <i class="fas fa-eye me-2"></i>عرض التفاصيل
            </a>
        </div>
    </div>

    <div class="row">
        <!-- Research Information (Readonly) -->
        <div class="col-lg-4 mb-4">
            <div class="card h-100">
                <div class="card-header bg-light">
                    <h5 class="mb-0"><i class="fas fa-file-alt me-2"></i>معلومات البحث</h5>
                </div>
                <div class="card-body">
                    <h6 class="text-primary">@Model.Research.Title</h6>
                    @if (!string.IsNullOrEmpty(Model.Research.TitleEn))
                    {
                        <p class="text-muted small">@Model.Research.TitleEn</p>
                    }

                    <div class="mb-3">
                        <strong>المؤلفون:</strong>
                        <ul class="list-unstyled mt-1">
                            @foreach (var author in Model.Research.Authors)
                            {
                                <li class="small">
                                    <i class="fas fa-user me-1"></i>
                                    @author.FullName
                                    @if (author.IsCorresponding)
                                    {
                                        <span class="badge bg-primary ms-1">مراسل</span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>

                    <div class="mb-3">
                        <strong>المسار:</strong>
                        <span class="badge bg-info ms-1">@Model.Research.TrackDisplayName</span>
                    </div>

                    <div class="mb-3">
                        <strong>نوع البحث:</strong>
                        <span class="text-muted">@Model.Research.ResearchTypeDisplayName</span>
                    </div>

                    <div class="mb-3">
                        <strong>تاريخ التقديم:</strong>
                        <span class="text-muted">@Model.Research.SubmissionDate.ToString("yyyy/MM/dd")</span>
                    </div>

                    <div class="mb-3">
                        <strong>الموعد النهائي للمراجعة:</strong>
                        @if (Model.DueDate.HasValue)
                        {
                            <span class="@(Model.IsOverdue() ? "text-danger fw-bold" : "text-success")">
                                @Model.DueDate.Value.ToString("yyyy/MM/dd")
                            </span>
                            @if (Model.IsOverdue())
                            {
                                <br>

                                <small class="text-danger">⚠️ متأخر @Model.GetDaysToComplete() يوم</small>
                            }
                            else
                            {
                                <br>

                                <small class="text-muted">@Model.GetDaysToComplete() يوم متبقي</small>
                            }
                        }
                        else
                        {
                            <span class="text-muted">غير محدد</span>
                        }
                    </div>

                    <div class="mb-3">
                        <strong>الملخص:</strong>
                        <div class="border rounded p-2 bg-light small" style="max-height: 150px; overflow-y: auto;">
                            @Model.Research.AbstractAr
                        </div>
                    </div>

                    @if (Model.Research.Files?.Any() == true)
                    {
                        <div class="mb-3">
                            <strong>الملفات:</strong>
                            <div class="list-group list-group-flush">
                                @foreach (var file in Model.Research.Files)
                                {
                                    <div class="list-group-item px-0 py-2">
                                        <a asp-controller="Research" asp-action="DownloadFile" asp-route-fileId="@file.Id"
                                           class="text-decoration-none" target="_blank">
                                            <i class="fas fa-file-pdf me-2 text-danger"></i>
                                            @file.OriginalFileName
                                        </a>
                                        <small class="text-muted d-block">@file.Description</small>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Edit Review Form -->
        <div class="col-lg-8">
            <form asp-action="Edit" method="post" id="editReviewForm">
                <input type="hidden" asp-for="ResearchId" />
                <input type="hidden" asp-for="ReviewerId" />

                <!-- Current Status Alert -->
                <div class="alert alert-info mb-4">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h6 class="alert-heading mb-2">
                                <i class="fas fa-info-circle me-2"></i>حالة المراجعة الحالية
                            </h6>
                            <div class="row">
                                <div class="col-6">
                                    <strong>التقييم الحالي:</strong>
                                    <span class="fs-5 text-primary">@Model.OverallScore.ToString("0.0")</span>/10
                                </div>
                                <div class="col-6">
                                    <strong>القرار الحالي:</strong>
                                    <span class="badge bg-secondary">@Model.DecisionDisplayName</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="progress" style="height: 20px;">
                                <div class="progress-bar @(Model.OverallScore >= 7 ? "bg-success" : Model.OverallScore >= 5 ? "bg-warning" : "bg-danger")"
                                     style="width: @(Model.OverallScore * 10)%">
                                    @Model.OverallScoreDisplayName
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Review Criteria -->
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0"><i class="fas fa-star me-2"></i>معايير التقييم</h5>
                    </div>
                    <div class="card-body">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                        <!-- Originality Score -->
                        <div class="mb-4">
                            <label class="form-label fw-bold">الأصالة والجدة (25%)</label>
                            <div class="rating-container mb-2">
                                <div class="btn-group" role="group">
                                    @for (int i = 1; i <= 10; i++)
                                    {
                                        var radioId = $"originality_{i}";
                                        <input type="radio" name="OriginalityScore" value="@i" id="@radioId" class="btn-check">
                                        <label class="btn btn-outline-primary btn-sm" for="@radioId">@i</label>
                                    }
                                </div>
                                <div class="mt-2">
                                    <small class="text-muted">القيمة المحددة: <span id="originalityDisplay">@Model.OriginalityScore</span></small>
                                </div>
                            </div>
                            <span asp-validation-for="OriginalityScore" class="text-danger"></span>
                            <textarea asp-for="OriginalityComments" class="form-control" rows="2"
                                      placeholder="تعليقات على الأصالة والجدة..."></textarea>
                        </div>

                        <!-- Methodology Score -->
                        <div class="mb-4">
                            <label class="form-label fw-bold">المنهجية والطريقة (25%)</label>
                            <div class="rating-container mb-2">
                                <div class="btn-group" role="group">
                                    @for (int i = 1; i <= 10; i++)
                                    {
                                        var radioId = $"methodology_{i}";
                                        <input type="radio" name="MethodologyScore" value="@i" id="@radioId" class="btn-check">
                                        <label class="btn btn-outline-primary btn-sm" for="@radioId">@i</label>
                                    }
                                </div>
                                <div class="mt-2">
                                    <small class="text-muted">القيمة المحددة: <span id="methodologyDisplay">@Model.MethodologyScore</span></small>
                                </div>
                            </div>
                            <span asp-validation-for="MethodologyScore" class="text-danger"></span>
                            <textarea asp-for="MethodologyComments" class="form-control" rows="2"
                                      placeholder="تعليقات على المنهجية..."></textarea>
                        </div>

                        <!-- Results Score -->
                        <div class="mb-4">
                            <label class="form-label fw-bold">النتائج والتحليل (25%)</label>
                            <div class="rating-container mb-2">
                                <div class="btn-group" role="group">
                                    @for (int i = 1; i <= 10; i++)
                                    {
                                        var radioId = $"results_{i}";
                                        <input type="radio" name="ResultsScore" value="@i" id="@radioId" class="btn-check">
                                        <label class="btn btn-outline-primary btn-sm" for="@radioId">@i</label>
                                    }
                                </div>
                                <div class="mt-2">
                                    <small class="text-muted">القيمة المحددة: <span id="resultsDisplay">@Model.ResultsScore</span></small>
                                </div>
                            </div>
                            <span asp-validation-for="ResultsScore" class="text-danger"></span>
                            <textarea asp-for="ResultsComments" class="form-control" rows="2"
                                      placeholder="تعليقات على النتائج والتحليل..."></textarea>
                        </div>

                        <!-- Writing Quality Score -->
                        <div class="mb-4">
                            <label class="form-label fw-bold">جودة الكتابة والعرض (25%)</label>
                            <div class="rating-container mb-2">
                                <div class="btn-group" role="group">
                                    @for (int i = 1; i <= 10; i++)
                                    {
                                        var radioId = $"writing_{i}";
                                        <input type="radio" name="WritingScore" value="@i" id="@radioId" class="btn-check">
                                        <label class="btn btn-outline-primary btn-sm" for="@radioId">@i</label>
                                    }
                                </div>
                                <div class="mt-2">
                                    <small class="text-muted">القيمة المحددة: <span id="writingDisplay">@Model.WritingScore</span></small>
                                </div>
                            </div>
                            <span asp-validation-for="WritingScore" class="text-danger"></span>
                            <textarea asp-for="WritingComments" class="form-control" rows="2"
                                      placeholder="تعليقات على جودة الكتابة..."></textarea>
                        </div>

                        <!-- Overall Score Display -->
                        <div class="alert alert-primary">
                            <div class="row align-items-center">
                                <div class="col-md-4">
                                    <strong>التقييم الجديد:</strong>
                                    <span id="newOverallScore" class="fs-4 text-primary">@Model.OverallScore.ToString("0.0")</span>/10
                                </div>
                                <div class="col-md-4">
                                    <strong>التقييم السابق:</strong>
                                    <span class="fs-6 text-muted">@Model.OverallScore.ToString("0.0")/10</span>
                                </div>
                                <div class="col-md-4">
                                    <div class="progress">
                                        <div id="newOverallProgress" class="progress-bar" style="width: @(Model.OverallScore * 10)%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Comments and Decision -->
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h5 class="mb-0"><i class="fas fa-comments me-2"></i>التعليقات والقرار</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="CommentsToAuthor" class="form-label">تعليقات للمؤلف *</label>
                            <textarea asp-for="CommentsToAuthor" class="form-control" rows="5"
                                      placeholder="اكتب تعليقاتك وملاحظاتك للمؤلف هنا..."></textarea>
                            <span asp-validation-for="CommentsToAuthor" class="text-danger"></span>
                            <div class="form-text">هذه التعليقات ستكون مرئية للمؤلف</div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="CommentsToTrackManager" class="form-label">تعليقات لمدير المسار</label>
                            <textarea asp-for="CommentsToTrackManager" class="form-control" rows="3"
                                      placeholder="تعليقات سرية لمدير المسار..."></textarea>
                            <span asp-validation-for="CommentsToTrackManager" class="text-danger"></span>
                            <div class="form-text">هذه التعليقات سرية ولن تكون مرئية للمؤلف</div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Decision" class="form-label">القرار النهائي *</label>
                            <select asp-for="Decision" class="form-select">
                                <option value="">اختر القرار</option>
                                <option value="1">قبول البحث</option>
                                <option value="2">رفض البحث</option>
                                <option value="3">قبول مع تعديلات طفيفة</option>
                                <option value="4">قبول مع تعديلات جوهرية</option>
                            </select>
                            <span asp-validation-for="Decision" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Recommendations" class="form-label">التوصيات</label>
                            <textarea asp-for="Recommendations" class="form-control" rows="3"
                                      placeholder="توصيات للتحسين أو التطوير..."></textarea>
                            <span asp-validation-for="Recommendations" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <!-- Confidentiality Notice -->
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>تنبيه:</strong> جميع المعلومات المتعلقة بهذا البحث سرية ولا يجب مشاركتها مع أطراف خارجية.
                </div>

                <!-- Action Buttons -->
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <button type="button" class="btn btn-outline-secondary me-2" id="saveDraft">
                                    <i class="fas fa-save me-2"></i>حفظ كمسودة
                                </button>
                                <a asp-action="Index" class="btn btn-outline-danger">
                                    <i class="fas fa-times me-2"></i>إلغاء التغييرات
                                </a>
                            </div>
                            <div class="col-md-6 text-end">
                                <button type="submit" class="btn btn-success btn-lg" id="updateReview">
                                    <i class="fas fa-check me-2"></i>تحديث المراجعة
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            console.log('📝 تم تحميل صفحة تعديل المراجعة');

            // Fix any radio button issues first
            fixRadioButtonIssues();

            // Initialize the form
            initializeEditForm();

            // Calculate initial overall score
            calculateOverallScore();

            // Set up event handlers
            setupEventHandlers();

            // Initialize selected values display
            updateSelectedValueDisplays();

            // Set initial decision value
            setInitialDecisionValue();

            // Debug after everything is set up
            setTimeout(function() {
                debugRadioButtons();
                console.log('🎯 اختبار النهائي للقيم:');
                logCurrentValues();
            }, 500);

            // Add periodic value checking (for debugging)
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                setInterval(function() {
                    const checkedRadios = $('input[type="radio"]:checked').length;
                    if (checkedRadios > 0) {
                        // Only log if there are changes
                        const currentTime = new Date().toLocaleTimeString();
                        console.log(`⏰ ${currentTime} - راديو باتون محددة: ${checkedRadios}`);
                    }
                }, 10000); // Every 10 seconds
            }
        });

        function setInitialDecisionValue() {
            // Set the correct decision value
            var decisionValue = '@((int)Model.Decision)';
            if (decisionValue && decisionValue !== '0') {
                $('select[name="Decision"]').val(decisionValue);
                console.log('🎯 تم تحديد القرار الأولي:', decisionValue);
            }
        }

        function initializeEditForm() {
            console.log('🔧 تهيئة النموذج');

            // Set initial radio button values
            setInitialRadioValues();

            // Ensure correct radio buttons are checked and styled
            $('input[type="radio"]:checked').each(function() {
                highlightRating($(this));
            });

            // Log current values for debugging
            console.log('القيم الحالية:', {
                originality: $('input[name="OriginalityScore"]:checked').val(),
                methodology: $('input[name="MethodologyScore"]:checked').val(),
                results: $('input[name="ResultsScore"]:checked').val(),
                writing: $('input[name="WritingScore"]:checked').val()
            });
        }

        function setInitialRadioValues() {
            // Set radio button values from model
            var originalityScore = @Model.OriginalityScore;
            var methodologyScore = @Model.MethodologyScore;
            var resultsScore = @Model.ResultsScore;
            var writingScore = @Model.WritingScore;

            console.log('📊 تحديد القيم الأولية:', {
                originality: originalityScore,
                methodology: methodologyScore,
                results: resultsScore,
                writing: writingScore
            });

            // Check the correct radio buttons
            if (originalityScore > 0) {
                $('input[name="OriginalityScore"][value="' + originalityScore + '"]').prop('checked', true);
                highlightRatingByName('OriginalityScore', originalityScore);
            }

            if (methodologyScore > 0) {
                $('input[name="MethodologyScore"][value="' + methodologyScore + '"]').prop('checked', true);
                highlightRatingByName('MethodologyScore', methodologyScore);
            }

            if (resultsScore > 0) {
                $('input[name="ResultsScore"][value="' + resultsScore + '"]').prop('checked', true);
                highlightRatingByName('ResultsScore', resultsScore);
            }

            if (writingScore > 0) {
                $('input[name="WritingScore"][value="' + writingScore + '"]').prop('checked', true);
                highlightRatingByName('WritingScore', writingScore);
            }
        }

        function highlightRatingByName(fieldName, value) {
            const input = $('input[name="' + fieldName + '"][value="' + value + '"]');
            if (input.length) {
                const container = input.closest('.btn-group');

                // Reset all buttons in this group
                container.find('label').removeClass('btn-primary').addClass('btn-outline-primary');

                // Highlight the selected button
                input.next('label').removeClass('btn-outline-primary').addClass('btn-primary');

                console.log('✨ تم تمييز', fieldName, 'بالقيمة', value);
            }
        }

        function setupEventHandlers() {
            // Rating button interactions
            $('input[type="radio"]').change(function() {
                const fieldName = $(this).attr('name');
                const selectedValue = $(this).val();

                console.log('🔄 تغيير التقييم:', fieldName, '=', selectedValue);

                // Verify the value is actually selected
                const checkedValue = $('input[name="' + fieldName + '"]:checked').val();
                console.log('🔍 القيمة المحددة فعلياً:', checkedValue);

                highlightRating($(this));
                calculateOverallScore();
                updateSelectedValueDisplays();

                // Additional verification
                setTimeout(() => {
                    const finalValue = $('input[name="' + fieldName + '"]:checked').val();
                    console.log('✅ القيمة النهائية بعد 100ms:', finalValue);
                }, 100);
            });

            // Also handle click events for better interaction
            $('.btn-group label').click(function(e) {
                const input = $(this).prev('input[type="radio"]');
                if (input.length) {
                    const fieldName = input.attr('name');
                    const selectedValue = input.val();

                    console.log('👆 نقر على الزر:', fieldName, '=', selectedValue);

                    // Force the radio button to be checked
                    input.prop('checked', true);

                    setTimeout(function() {
                        const actualValue = input.val();
                        const isChecked = input.is(':checked');

                        console.log('🔍 تحقق من الحالة:', {
                            field: fieldName,
                            value: actualValue,
                            checked: isChecked
                        });

                        if (isChecked) {
                            highlightRating(input);
                            calculateOverallScore();
                            updateSelectedValueDisplays();
                        }
                    }, 50);
                }
            });

            // Save as draft
            $('#saveDraft').click(function() {
                console.log('💾 حفظ كمسودة...');
                logCurrentValues();

                const form = $('#editReviewForm');
                $('<input>').attr({
                    type: 'hidden',
                    name: 'IsDraft',
                    value: 'true'
                }).appendTo(form);

                form.submit();
            });

            // Form validation
            $('#editReviewForm').on('submit', function(e) {
                console.log('📤 إرسال النموذج...');
                logCurrentValues();

                if (!validateEditForm()) {
                    e.preventDefault();
                    return false;
                }

                // Confirmation
                if (!confirm('هل أنت متأكد من تحديث هذه المراجعة؟\n\nسيتم حفظ جميع التغييرات وقد لا يمكن التراجع عنها.')) {
                    e.preventDefault();
                    return false;
                }

                // Final verification before submit
                console.log('🔍 القيم النهائية قبل الإرسال:');
                logCurrentValues();

                // Show loading state
                $('#updateReview').html('<i class="fas fa-spinner fa-spin me-2"></i>جاري التحديث...').prop('disabled', true);

                return true;
            });
        }

        function logCurrentValues() {
            const values = {
                OriginalityScore: $('input[name="OriginalityScore"]:checked').val() || 'غير محدد',
                MethodologyScore: $('input[name="MethodologyScore"]:checked').val() || 'غير محدد',
                ResultsScore: $('input[name="ResultsScore"]:checked').val() || 'غير محدد',
                WritingScore: $('input[name="WritingScore"]:checked').val() || 'غير محدد',
                Decision: $('select[name="Decision"]').val() || 'غير محدد'
            };

            console.table(values);

            // Also check if any radio buttons have conflicting values
            $('input[type="radio"]').each(function() {
                if ($(this).is(':checked')) {
                    const name = $(this).attr('name');
                    const value = $(this).val();
                    const attr = $(this).attr('value');

                    if (value !== attr) {
                        console.warn('⚠️ تضارب في القيم:', name, 'val()=', value, 'attr=', attr);
                    }
                }
            });
        }

        function highlightRating(radioButton) {
            const container = radioButton.closest('.btn-group');
            const value = parseInt(radioButton.val());
            const name = radioButton.attr('name');

            console.log('🎯 تحديث التمييز للحقل:', name, 'القيمة:', value);

            // Reset all buttons in this group
            container.find('label').removeClass('btn-primary').addClass('btn-outline-primary');

            // Highlight the selected button
            container.find('input[value="' + value + '"]').next('label')
                .removeClass('btn-outline-primary').addClass('btn-primary');
        }

        function updateSelectedValueDisplays() {
            // Update the selected value displays
            const originality = $('input[name="OriginalityScore"]:checked').val() || 0;
            const methodology = $('input[name="MethodologyScore"]:checked').val() || 0;
            const results = $('input[name="ResultsScore"]:checked').val() || 0;
            const writing = $('input[name="WritingScore"]:checked').val() || 0;

            $('#originalitySelectedValue').text(originality);
            $('#methodologySelectedValue').text(methodology);
            $('#resultsSelectedValue').text(results);
            $('#writingSelectedValue').text(writing);
        }

        function calculateOverallScore() {
            let total = 0;
            let count = 0;

            // Get all checked score radio buttons
            const scores = [];
            $('input[type="radio"]:checked').each(function() {
                const name = $(this).attr('name');
                if (name && name.includes('Score')) {
                    const value = parseInt($(this).val());
                    scores.push(value);
                    total += value;
                    count++;
                }
            });

            const average = count > 0 ? (total / count).toFixed(1) : 0;

            console.log('📊 حساب التقييم الإجمالي:', {
                scores: scores,
                total: total,
                count: count,
                average: average
            });

            $('#newOverallScore').text(average);
            $('#newOverallProgress').css('width', (average * 10) + '%');

            // Update progress bar color based on score
            const progressBar = $('#newOverallProgress');
            progressBar.removeClass('bg-danger bg-warning bg-success');
            if (average < 4) {
                progressBar.addClass('bg-danger');
            } else if (average < 7) {
                progressBar.addClass('bg-warning');
            } else {
                progressBar.addClass('bg-success');
            }
        }

        function validateEditForm() {
            let isValid = true;
            let missingFields = [];

            // Check if all scores are provided
            const scoreFields = ['OriginalityScore', 'MethodologyScore', 'ResultsScore', 'WritingScore'];
            scoreFields.forEach(function(field) {
                const checked = $(`input[name="${field}"]:checked`);
                if (!checked.length) {
                    isValid = false;
                    const displayName = field.replace('Score', '').replace('Originality', 'الأصالة')
                        .replace('Methodology', 'المنهجية').replace('Results', 'النتائج')
                        .replace('Writing', 'جودة الكتابة');
                    missingFields.push('تقييم ' + displayName);
                }
            });

            // Check required text fields
            if (!$('[name="CommentsToAuthor"]').val().trim()) {
                isValid = false;
                missingFields.push('تعليقات للمؤلف');
                $('[name="CommentsToAuthor"]').addClass('is-invalid');
            } else {
                $('[name="CommentsToAuthor"]').removeClass('is-invalid');
            }

            if (!$('[name="Decision"]').val()) {
                isValid = false;
                missingFields.push('القرار النهائي');
                $('[name="Decision"]').addClass('is-invalid');
            } else {
                $('[name="Decision"]').removeClass('is-invalid');
            }

            if (!isValid) {
                let message = 'يرجى إكمال الحقول المطلوبة:\n• ' + missingFields.join('\n• ');
                alert(message);

                // Scroll to first invalid field
                const firstInvalid = $('.is-invalid').first();
                if (firstInvalid.length) {
                    $('html, body').animate({
                        scrollTop: firstInvalid.offset().top - 100
                    }, 500);
                }
            }

            return isValid;
        }

        // Store original values for change detection
        let formChanged = false;
        $('#editReviewForm input, #editReviewForm textarea, #editReviewForm select').on('change input', function() {
            formChanged = true;
        });

        // Warn before leaving with unsaved changes
        $(window).on('beforeunload', function() {
            if (formChanged) {
                return 'لديك تغييرات غير محفوظة. هل تريد المغادرة؟';
            }
        });

        $('#editReviewForm').on('submit', function() {
            formChanged = false;
        });

        // Debug function to check radio button states
        function debugRadioButtons() {
            console.log('🔍 فحص حالة الراديو باتون:');

            const scoreFields = ['OriginalityScore', 'MethodologyScore', 'ResultsScore', 'WritingScore'];

            scoreFields.forEach(function(field) {
                console.log(`\n📊 ${field}:`);

                // Check all radio buttons for this field
                $(`input[name="${field}"]`).each(function(index) {
                    const value = $(this).val();
                    const isChecked = $(this).is(':checked');
                    const attrValue = $(this).attr('value');

                    if (isChecked) {
                        console.log(`  ✅ محدد: القيمة=${value}, الخاصية=${attrValue}, المفتاح=${index + 1}`);
                    }
                });

                // Check what's actually selected
                const selectedValue = $(`input[name="${field}"]:checked`).val();
                console.log(`  🎯 القيمة المحددة حالياً: ${selectedValue || 'لا شيء'}`);
            });

            // Check for duplicate IDs or values
            const allRadios = $('input[type="radio"]');
            const ids = [];
            const duplicateIds = [];

            allRadios.each(function() {
                const id = $(this).attr('id');
                if (ids.includes(id)) {
                    duplicateIds.push(id);
                } else {
                    ids.push(id);
                }
            });

            if (duplicateIds.length > 0) {
                console.warn('⚠️ معرفات مكررة:', duplicateIds);
            }
        }

        // Function to fix radio button issues
        function fixRadioButtonIssues() {
            console.log('🔧 إصلاح مشاكل الراديو باتون...');

            // Ensure all radio buttons have unique IDs and correct values
            const scoreFields = ['OriginalityScore', 'MethodologyScore', 'ResultsScore', 'WritingScore'];

            scoreFields.forEach(function(fieldName) {
                $(`input[name="${fieldName}"]`).each(function(index) {
                    const expectedValue = index + 1;
                    const currentValue = $(this).val();
                    const currentId = $(this).attr('id');

                    // Fix value if incorrect
                    if (parseInt(currentValue) !== expectedValue) {
                        console.log(`🔧 إصلاح قيمة ${fieldName}[${index}]: ${currentValue} -> ${expectedValue}`);
                        $(this).attr('value', expectedValue);
                        $(this).val(expectedValue);
                    }

                    // Ensure label points to correct input
                    const label = $(this).next('label');
                    if (label.attr('for') !== currentId) {
                        label.attr('for', currentId);
                    }
                });
            });

            console.log('✅ تم إصلاح مشاكل الراديو باتون');
        }

        // Enhanced function to update selected values with better validation
        function updateSelectedValueDisplays() {
            const fields = [
                { name: 'OriginalityScore', display: '#originalitySelectedValue' },
                { name: 'MethodologyScore', display: '#methodologySelectedValue' },
                { name: 'ResultsScore', display: '#resultsSelectedValue' },
                { name: 'WritingScore', display: '#writingSelectedValue' }
            ];

            fields.forEach(function(field) {
                const selectedInput = $(`input[name="${field.name}"]:checked`);
                const value = selectedInput.length ? selectedInput.val() : 0;

                $(field.display).text(value);

                // Add visual feedback for debugging
                if (selectedInput.length) {
                    $(field.display).removeClass('text-danger').addClass('text-primary');
                } else {
                    $(field.display).removeClass('text-primary').addClass('text-danger');
                }
            });
        }
    </script>
}

@section Styles {
    <style>
        .rating-container .btn-group {
            flex-wrap: wrap;
            gap: 2px;
        }

        .rating-container .btn {
            min-width: 40px;
            margin: 1px;
        }

        .btn-check {
            position: absolute;
            clip: rect(0, 0, 0, 0);
            pointer-events: none;
        }

            .btn-check:checked + .btn,
            .btn.active {
                background-color: #0d6efd !important;
                border-color: #0d6efd !important;
                color: white !important;
            }

            .btn-check:focus + .btn {
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            }

        .is-invalid {
            border-color: #dc3545;
        }

        .card-header h5 {
            color: #495057;
        }

        .progress {
            height: 15px;
        }

        .alert-primary {
            background-color: #cfe2ff;
            border-color: #b6d4fe;
            color: #084298;
        }

        .alert-warning {
            background-color: #fff3cd;
            border-color: #ffc107;
            color: #856404;
        }

        textarea {
            resize: vertical;
        }

        .form-text.text-danger {
            font-weight: bold;
        }

        /* Enhanced animations */
        .card {
            transition: box-shadow 0.15s ease-in-out;
        }

            .card:hover {
                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            }

        .btn {
            transition: all 0.15s ease-in-out;
        }

            .btn:hover {
                transform: translateY(-1px);
            }

        .progress-bar {
            transition: width 0.6s ease;
        }

        /* Overdue warning styles */
        .text-danger.fw-bold {
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%

        {
            opacity: 1;
        }

        50% {
            opacity: 0.7;
        }

        100% {
            opacity: 1;
        }

        }

        /* Better radio button styling */
        .rating-container {
            user-select: none;
        }

        .btn-group .btn {
            border-radius: 0.25rem !important;
            margin: 0 1px;
        }

            .btn-group .btn:first-child {
                border-top-left-radius: 0.25rem !important;
                border-bottom-left-radius: 0.25rem !important;
            }

            .btn-group .btn:last-child {
                border-top-right-radius: 0.25rem !important;
                border-bottom-right-radius: 0.25rem !important;
            }

        /* Highlight selected value display */
        .text-muted small {
            font-weight: 500;
        }

        #originalitySelectedValue,
        #methodologySelectedValue,
        #resultsSelectedValue,
        #writingSelectedValue {
            color: #0d6efd !important;
            font-weight: bold;
        }

        /* Improved form styling */
        .form-control:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .form-select:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        /* Better button interactions */
        .btn-group label {
            cursor: pointer;
            position: relative;
        }

            .btn-group label:hover {
                background-color: #e9ecef;
                border-color: #adb5bd;
            }

            .btn-group label.btn-primary:hover {
                background-color: #0b5ed7;
                border-color: #0a58ca;
            }

        /* Card animations */
        .card {
            border: 1px solid rgba(0, 0, 0, 0.125);
            border-radius: 0.5rem;
        }

        .card-header {
            border-bottom: 1px solid rgba(0, 0, 0, 0.125);
            background-color: rgba(0, 0, 0, 0.03);
        }

        /* Alert styling improvements */
        .alert {
            border-radius: 0.5rem;
        }

        .alert-info {
            background-color: #d1ecf1;
            border-color: #bee5eb;
            color: #0c5460;
        }

        /* Better progress bar */
        .progress {
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .progress-bar {
            border-radius: 0.5rem;
        }

        /* Validation error styling */
        .text-danger {
            font-size: 0.875em;
            margin-top: 0.25rem;
        }

        /* Form text styling */
        .form-text {
            font-size: 0.875em;
            color: #6c757d;
        }

        /* Loading button animation */
        .btn .fa-spinner {
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        /* Mobile responsiveness */
        @@media (max-width: 768px) {
            .btn-group

        {
            flex-wrap: wrap;
        }

        .btn-group .btn {
            margin: 2px;
            min-width: 35px;
        }

        .rating-container .btn-group {
            justify-content: center;
        }

        }

        /* Print styles */
        @@media print {
            .btn, .alert, .card-header

        {
            background: white !important;
            color: black !important;
            border: 1px solid black !important;
        }

        }
    </style>
}