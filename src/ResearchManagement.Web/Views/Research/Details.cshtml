@model ResearchManagement.Web.Models.ViewModels.Research.ResearchDetailsViewModel
@using ResearchManagement.Domain.Enums
@{
    ViewData["Title"] = "تفاصيل البحث";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Index">البحوث</a></li>
                    <li class="breadcrumb-item active">تفاصيل البحث</li>
                </ol>
            </nav>
            <h2 class="text-primary">@Model.Research.Title</h2>
            @if (!string.IsNullOrEmpty(Model.Research.TitleEn))
            {
                <h5 class="text-muted">@Model.Research.TitleEn</h5>
            }
        </div>
        <div class="col-md-4 text-end">
            <div class="btn-group" role="group">
                @if (Model.CanEdit)
                {
                    <a asp-action="Edit" asp-route-id="@Model.Research.Id" class="btn btn-warning">
                        <i class="fas fa-edit me-2"></i>تعديل
                    </a>
                }
                @if (Model.CanReview)
                {
                    <a asp-controller="Review" asp-action="Create" asp-route-researchId="@Model.Research.Id" class="btn btn-info">
                        <i class="fas fa-clipboard-check me-2"></i>مراجعة
                    </a>
                }
                @if (Model.CanManageStatus)
                {
                    <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#statusModal">
                        <i class="fas fa-cog me-2"></i>إدارة الحالة
                    </button>
                }
            </div>
        </div>
    </div>

    <!-- Status and Basic Info -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>معلومات أساسية</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>الحالة:</strong></td>
                                    <td><span class="badge @Model.StatusBadgeClass fs-6">@Model.StatusDisplayName</span></td>
                                </tr>
                                <tr>
                                    <td><strong>المسار:</strong></td>
                                    <td><span class="badge bg-info fs-6">@Model.TrackDisplayName</span></td>
                                </tr>
                                <tr>
                                    <td><strong>نوع البحث:</strong></td>
                                    <td>@GetResearchTypeDisplayName(Model.Research.ResearchType)</td>
                                </tr>
                                <tr>
                                    <td><strong>اللغة:</strong></td>
                                    <td>@GetLanguageDisplayName(Model.Research.Language)</td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>تاريخ التقديم:</strong></td>
                                    <td>@Model.Research.SubmissionDate.ToString("yyyy/MM/dd HH:mm")</td>
                                </tr>
                                <tr>
                                    <td><strong>آخر تحديث:</strong></td>
                                    <td>
                                        @if (Model.Research.UpdatedAt.HasValue)
                                        {
                                            @Model.Research.UpdatedAt.Value.ToString("yyyy/MM/dd HH:mm")
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>مدير المسار:</strong></td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(Model.Research.AssignedTrackManagerName))
                                        {
                                            @Model.Research.AssignedTrackManagerName
                                        }
                                        else
                                        {
                                            <span class="text-muted">غير محدد</span>
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>المقدم بواسطة:</strong></td>
                                    <td>@Model.Research.SubmittedByName</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-chart-pie me-2"></i>إحصائيات المراجعة</h6>
                </div>
                <div class="card-body text-center">
                    <div class="row">
                        <div class="col-4">
                            <h4 class="text-primary">@Model.TotalReviews</h4>
                            <small class="text-muted">إجمالي</small>
                        </div>
                        <div class="col-4">
                            <h4 class="text-success">@Model.CompletedReviews</h4>
                            <small class="text-muted">مكتملة</small>
                        </div>
                        <div class="col-4">
                            <h4 class="text-warning">@Model.PendingReviews</h4>
                            <small class="text-muted">معلقة</small>
                        </div>
                    </div>
                    @if (Model.AverageScore > 0)
                    {
                        <hr>
                        <div>
                            <h5 class="text-info">@Model.AverageScore.ToString("F1")</h5>
                            <small class="text-muted">متوسط التقييم</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Abstract and Keywords -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-file-text me-2"></i>الملخص والكلمات المفتاحية</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>الملخص العربي:</h6>
                            <p class="text-justify">@Model.Research.AbstractAr</p>
                            
                            @if (!string.IsNullOrEmpty(Model.Research.Keywords))
                            {
                                <h6>الكلمات المفتاحية:</h6>
                                <div>
                                    @foreach (var keyword in Model.Research.Keywords.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        <span class="badge bg-light text-dark me-1 mb-1">@keyword.Trim()</span>
                                    }
                                </div>
                            }
                        </div>
                        <div class="col-md-6">
                            @if (!string.IsNullOrEmpty(Model.Research.AbstractEn))
                            {
                                <h6>Abstract (English):</h6>
                                <p class="text-justify">@Model.Research.AbstractEn</p>
                            }
                            
                            @if (!string.IsNullOrEmpty(Model.Research.KeywordsEn))
                            {
                                <h6>Keywords:</h6>
                                <div>
                                    @foreach (var keyword in Model.Research.KeywordsEn.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        <span class="badge bg-light text-dark me-1 mb-1">@keyword.Trim()</span>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Authors -->
    @if (Model.Research.Authors?.Any() == true)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-users me-2"></i>المؤلفون</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var author in Model.Research.Authors.OrderBy(a => a.Order))
                            {
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h6 class="card-title">
                                                @author.FirstName @author.LastName
                                                @if (author.IsCorresponding)
                                                {
                                                    <span class="badge bg-primary ms-1">مراسل</span>
                                                }
                                            </h6>
                                            @if (!string.IsNullOrEmpty(author.FirstNameEn) && !string.IsNullOrEmpty(author.LastNameEn))
                                            {
                                                <p class="card-text"><small class="text-muted">@author.FirstNameEn @author.LastNameEn</small></p>
                                            }
                                            <p class="card-text">
                                                <i class="fas fa-envelope me-1"></i>@author.Email<br>
                                                @if (!string.IsNullOrEmpty(author.Institution))
                                                {
                                                    <i class="fas fa-university me-1"></i>@author.Institution<br>
                                                }
                                                @if (!string.IsNullOrEmpty(author.AcademicDegree))
                                                {
                                                    <i class="fas fa-graduation-cap me-1"></i>@author.AcademicDegree<br>
                                                }
                                                @if (!string.IsNullOrEmpty(author.OrcidId))
                                                {
                                                    <i class="fab fa-orcid me-1"></i>@author.OrcidId
                                                }
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Files -->
    @if (Model.Files?.Any() == true)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0"><i class="fas fa-file me-2"></i>الملفات المرفقة</h5>
                        @if (Model.CanUploadFiles)
                        {
                            <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#uploadModal">
                                <i class="fas fa-upload me-1"></i>رفع ملف
                            </button>
                        }
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>اسم الملف</th>
                                        <th>النوع</th>
                                        <th>الحجم</th>
                                        <th>تاريخ الرفع</th>
                                        <th>الإجراءات</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var file in Model.Files.Where(f => f.IsActive))
                                    {
                                        <tr>
                                            <td>
                                                <i class="fas fa-file-pdf text-danger me-2"></i>
                                                @file.OriginalFileName
                                                @if (!string.IsNullOrEmpty(file.Description))
                                                {
                                                    <br><small class="text-muted">@file.Description</small>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@GetFileTypeDisplayName(file.FileType)</span>
                                            </td>
                                            <td>@FormatFileSize(file.FileSize)</td>
                                            <td>@file.CreatedAt.ToString("yyyy/MM/dd HH:mm")</td>
                                            <td>
                                                @if (Model.CanDownloadFiles)
                                                {
                                                    <a asp-action="DownloadFile" asp-route-fileId="@file.Id" class="btn btn-outline-primary btn-sm">
                                                        <i class="fas fa-download"></i>
                                                    </a>
                                                }
                                                @if (Model.CanEdit)
                                                {
                                                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteFile(@file.Id)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Reviews -->
    @if (Model.Reviews?.Any() == true)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-clipboard-check me-2"></i>المراجعات</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var review in Model.Reviews.OrderByDescending(r => r.CreatedAt))
                        {
                            <div class="card mb-3">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@review.ReviewerName</strong>
                                        <span class="badge @(review.IsCompleted ? "bg-success" : "bg-warning") ms-2">
                                            @(review.IsCompleted ? "مكتملة" : "قيد التنفيذ")
                                        </span>
                                    </div>
                                    <small class="text-muted">@review.CreatedAt.ToString("yyyy/MM/dd HH:mm")</small>
                                </div>
                                @if (review.IsCompleted)
                                {
                                    <div class="card-body">
                                        @if (review.Decision != ReviewDecision.NotReviewed)
                                        {
                                            <div class="mb-3">
                                                <strong>القرار:</strong>
                                                <span class="badge @GetDecisionBadgeClass(review.Decision) ms-2">
                                                    @GetDecisionDisplayName(review.Decision)
                                                </span>
                                            </div>
                                        }
                                        @if (review.Score > 0)
                                        {
                                            <div class="mb-3">
                                                <strong>التقييم:</strong>
                                                <span class="badge bg-info ms-2">@review.Score/10</span>
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(review.CommentsToAuthor))
                                        {
                                            <div class="mb-3">
                                                <strong>تعليقات للمؤلف:</strong>
                                                <div class="mt-2 p-3 bg-light rounded">
                                                    @review.CommentsToAuthor
                                                </div>
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(review.CommentsToTrackManager) && Model.IsTrackManager)
                                        {
                                            <div class="mb-3">
                                                <strong>تعليقات لمدير المسار:</strong>
                                                <div class="mt-2 p-3 bg-warning bg-opacity-10 rounded">
                                                    @review.CommentsToTrackManager
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Status History -->
    @if (Model.StatusHistory?.Any() == true)
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-history me-2"></i>تاريخ الحالات</h5>
                    </div>
                    <div class="card-body">
                        <div class="timeline">
                            @foreach (var history in Model.StatusHistory.OrderByDescending(h => h.ChangedAt))
                            {
                                <div class="timeline-item">
                                    <div class="timeline-marker bg-primary"></div>
                                    <div class="timeline-content">
                                        <h6 class="timeline-title">
                                            Changed from "@history.FromStatusDisplayName" to "@history.ToStatusDisplayName"
                                        </h6>
                                        <p class="timeline-text">
                                            By: @history.ChangedByName<br>
                                            Date: @history.ChangedAt.ToString("yyyy/MM/dd HH:mm")
                                            @if (!string.IsNullOrEmpty(history.Notes))
                                            {
                                                <br />
                                                <span>Notes: @history.Notes</span>
                                            }
                                        </p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Notes -->
    @if (!string.IsNullOrEmpty(Model.Research.Notes))
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="fas fa-sticky-note me-2"></i>ملاحظات إضافية</h5>
                    </div>
                    <div class="card-body">
                        <p>@Model.Research.Notes</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Status Management Modal -->
<div class="modal fade" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="statusModalLabel">
                    <i class="fas fa-cog me-2"></i>إدارة حالة البحث
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="UpdateStatus" method="post" id="statusForm">
                <div class="modal-body">
                    <input type="hidden" name="researchId" value="@Model.Research.Id" />

                    <div class="mb-3">
                        <label class="form-label fw-bold">الحالة الحالية:</label>
                        <span class="badge @GetStatusBadgeClass(Model.Research.Status) fs-6">
                            @GetStatusDisplayName(Model.Research.Status)
                        </span>
                    </div>

                    <div class="mb-3">
                        <label for="newStatus" class="form-label">الحالة الجديدة: <span class="text-danger">*</span></label>
                        <select name="newStatus" id="newStatus" class="form-select" required>
                            <option value="">اختر الحالة الجديدة</option>
                            <option value="@((int)ResearchManagement.Domain.Enums.ResearchStatus.UnderInitialReview)">قيد المراجعة الأولية</option>
                            <option value="@((int)ResearchManagement.Domain.Enums.ResearchStatus.AssignedForReview)">موزع للتقييم</option>
                            <option value="@((int)ResearchManagement.Domain.Enums.ResearchStatus.UnderReview)">قيد التقييم</option>
                            <option value="@((int)ResearchManagement.Domain.Enums.ResearchStatus.UnderEvaluation)">تحت المراجعة</option>
                            <option value="@((int)ResearchManagement.Domain.Enums.ResearchStatus.RequiresMinorRevisions)">يتطلب تعديلات طفيفة</option>
                            <option value="@((int)ResearchManagement.Domain.Enums.ResearchStatus.RequiresMajorRevisions)">يتطلب تعديلات جوهرية</option>
                            <option value="@((int)ResearchManagement.Domain.Enums.ResearchStatus.RevisionsUnderReview)">مراجعة التعديلات</option>
                            <option value="@((int)ResearchManagement.Domain.Enums.ResearchStatus.Accepted)">مقبول</option>
                            <option value="@((int)ResearchManagement.Domain.Enums.ResearchStatus.Rejected)">مرفوض</option>
                            <option value="@((int)ResearchManagement.Domain.Enums.ResearchStatus.AwaitingFourthReviewer)">بانتظار المقيم الرابع</option>
                        </select>
                        <div class="invalid-feedback">
                            يرجى اختيار الحالة الجديدة
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="statusNotes" class="form-label">ملاحظات (اختياري):</label>
                        <textarea name="notes" id="statusNotes" class="form-control" rows="3"
                                  placeholder="أدخل أي ملاحظات حول تغيير الحالة..."></textarea>
                        <div class="form-text">
                            <i class="fas fa-info-circle me-1"></i>
                            ستصل هذه الملاحظات للباحث عبر البريد الإلكتروني
                        </div>
                    </div>

                    <!-- Status Change Preview -->
                    <div class="alert alert-info d-none" id="statusPreview">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>معاينة التغيير:</strong>
                        <br>
                        من: <span class="badge @GetStatusBadgeClass(Model.Research.Status)">@GetStatusDisplayName(Model.Research.Status)</span>
                        إلى: <span id="newStatusBadge" class="badge"></span>
                    </div>

                    <!-- Validation warnings -->
                    <div class="alert alert-warning d-none" id="statusWarning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <span id="warningMessage"></span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>إلغاء
                    </button>
                    <button type="submit" class="btn btn-primary" id="updateStatusBtn">
                        <i class="fas fa-save me-2"></i>تحديث الحالة
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@{
    // Helper functions for status display
    string GetStatusDisplayName(ResearchManagement.Domain.Enums.ResearchStatus status)
    {
        return status switch
        {
            ResearchManagement.Domain.Enums.ResearchStatus.Submitted => "مُقدم",
            ResearchManagement.Domain.Enums.ResearchStatus.UnderInitialReview => "قيد المراجعة الأولية",
            ResearchManagement.Domain.Enums.ResearchStatus.AssignedForReview => "موزع للتقييم",
            ResearchManagement.Domain.Enums.ResearchStatus.UnderReview => "قيد التقييم",
            ResearchManagement.Domain.Enums.ResearchStatus.UnderEvaluation => "تحت المراجعة",
            ResearchManagement.Domain.Enums.ResearchStatus.RequiresMinorRevisions => "يتطلب تعديلات طفيفة",
            ResearchManagement.Domain.Enums.ResearchStatus.RequiresMajorRevisions => "يتطلب تعديلات جوهرية",
            ResearchManagement.Domain.Enums.ResearchStatus.RevisionsSubmitted => "تعديلات مُقدمة",
            ResearchManagement.Domain.Enums.ResearchStatus.RevisionsUnderReview => "مراجعة التعديلات",
            ResearchManagement.Domain.Enums.ResearchStatus.Accepted => "مقبول",
            ResearchManagement.Domain.Enums.ResearchStatus.Rejected => "مرفوض",
            ResearchManagement.Domain.Enums.ResearchStatus.Withdrawn => "منسحب",
            ResearchManagement.Domain.Enums.ResearchStatus.AwaitingFourthReviewer => "بانتظار المقيم الرابع",
            _ => status.ToString()
        };
    }

    string GetStatusBadgeClass(ResearchManagement.Domain.Enums.ResearchStatus status)
    {
        return status switch
        {
            ResearchManagement.Domain.Enums.ResearchStatus.Submitted => "bg-info",
            ResearchManagement.Domain.Enums.ResearchStatus.UnderInitialReview => "bg-warning",
            ResearchManagement.Domain.Enums.ResearchStatus.AssignedForReview => "bg-primary",
            ResearchManagement.Domain.Enums.ResearchStatus.UnderReview => "bg-primary",
            ResearchManagement.Domain.Enums.ResearchStatus.UnderEvaluation => "bg-warning",
            ResearchManagement.Domain.Enums.ResearchStatus.RequiresMinorRevisions => "bg-warning",
            ResearchManagement.Domain.Enums.ResearchStatus.RequiresMajorRevisions => "bg-warning",
            ResearchManagement.Domain.Enums.ResearchStatus.RevisionsSubmitted => "bg-info",
            ResearchManagement.Domain.Enums.ResearchStatus.RevisionsUnderReview => "bg-primary",
            ResearchManagement.Domain.Enums.ResearchStatus.Accepted => "bg-success",
            ResearchManagement.Domain.Enums.ResearchStatus.Rejected => "bg-danger",
            ResearchManagement.Domain.Enums.ResearchStatus.Withdrawn => "bg-secondary",
            ResearchManagement.Domain.Enums.ResearchStatus.AwaitingFourthReviewer => "bg-info",
            _ => "bg-secondary"
        };
    }
}

@section Styles {
    <style>
        .timeline {
            position: relative;
            padding-left: 30px;
        }
        
        .timeline::before {
            content: '';
            position: absolute;
            left: 15px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #dee2e6;
        }
        
        .timeline-item {
            position: relative;
            margin-bottom: 20px;
        }
        
        .timeline-marker {
            position: absolute;
            left: -22px;
            top: 5px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid #fff;
        }
        
        .timeline-content {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            border-left: 3px solid #007bff;
        }
        
        .timeline-title {
            margin-bottom: 5px;
            color: #495057;
        }
        
        .timeline-text {
            margin-bottom: 0;
            color: #6c757d;
            font-size: 0.9em;
        }
    </style>
}

@functions {
    private string GetResearchTypeDisplayName(ResearchManagement.Domain.Enums.ResearchType type)
    {
        return type switch
        {
            ResearchManagement.Domain.Enums.ResearchType.OriginalResearch => "بحث كامل",
            ResearchManagement.Domain.Enums.ResearchType.CaseStudy => "بحث قصير",
            ResearchManagement.Domain.Enums.ResearchType.ExperimentalStudy => "ملصق علمي",
            ResearchManagement.Domain.Enums.ResearchType.AppliedResearch => "ورشة عمل",
            _ => type.ToString()
        };
    }

    private string GetLanguageDisplayName(ResearchManagement.Domain.Enums.ResearchLanguage language)
    {
        return language switch
        {
            ResearchManagement.Domain.Enums.ResearchLanguage.Arabic => "العربية",
            ResearchManagement.Domain.Enums.ResearchLanguage.English => "الإنجليزية",
            ResearchManagement.Domain.Enums.ResearchLanguage.Bilingual => "ثنائي اللغة",
            _ => language.ToString()
        };
    }

    private string GetFileTypeDisplayName(ResearchManagement.Domain.Enums.FileType fileType)
    {
        return fileType switch
        {
            ResearchManagement.Domain.Enums.FileType.OriginalResearch => "البحث الأصلي",
            ResearchManagement.Domain.Enums.FileType.RevisedVersion => "النسخة المعدلة",
            ResearchManagement.Domain.Enums.FileType.RevisionFiles => "ملفات التعديل",
            ResearchManagement.Domain.Enums.FileType.ReviewerNotes => "ملاحظات المقيم",
            ResearchManagement.Domain.Enums.FileType.SupplementaryFiles => "ملفات إضافية",
            ResearchManagement.Domain.Enums.FileType.ResponseToReviewers => "ملف الاستجابة للمراجعين",
            _ => fileType.ToString()
        };
    }

    private string GetDecisionDisplayName(ResearchManagement.Domain.Enums.ReviewDecision decision)
    {
        return decision switch
        {
            ResearchManagement.Domain.Enums.ReviewDecision.AcceptAsIs => "قبول",
            ResearchManagement.Domain.Enums.ReviewDecision.Reject => "رفض",
            ResearchManagement.Domain.Enums.ReviewDecision.AcceptWithMinorRevisions => "تعديل طفيف",
            ResearchManagement.Domain.Enums.ReviewDecision.MajorRevisionsRequired => "تعديل جوهري",
            _ => decision.ToString()
        };
    }

    private string GetDecisionBadgeClass(ResearchManagement.Domain.Enums.ReviewDecision decision)
    {
        return decision switch
        {
            ResearchManagement.Domain.Enums.ReviewDecision.AcceptAsIs => "bg-success",
            ResearchManagement.Domain.Enums.ReviewDecision.Reject => "bg-danger",
            ResearchManagement.Domain.Enums.ReviewDecision.AcceptWithMinorRevisions => "bg-warning",
            ResearchManagement.Domain.Enums.ReviewDecision.MajorRevisionsRequired => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}
@section Scripts{



<script>
$(document).ready(function() {
    // Status management
    $('#newStatus').on('change', function() {
        var selectedValue = $(this).val();
        var selectedText = $(this).find('option:selected').text();
        
        if (selectedValue) {
            // Show preview
            $('#statusPreview').removeClass('d-none');
            $('#newStatusBadge').text(selectedText).attr('class', 'badge ' + getStatusBadgeClass(selectedValue));
            
            // Show warnings for specific status changes
            showStatusWarnings(selectedValue);
            
            // Enable submit button
            $('#updateStatusBtn').prop('disabled', false);
        } else {
            $('#statusPreview').addClass('d-none');
            $('#statusWarning').addClass('d-none');
            $('#updateStatusBtn').prop('disabled', true);
        }
    });

    // Form submission
    $('#statusForm').on('submit', function(e) {
        e.preventDefault();
        
        var newStatus = $('#newStatus').val();
        var notes = $('#statusNotes').val();
        var statusText = $('#newStatus').find('option:selected').text();
        
        if (!newStatus) {
            $('#newStatus').addClass('is-invalid');
            return false;
        }
        
        // Confirmation dialog
        if (confirm(`هل أنت متأكد من تغيير حالة البحث إلى "${statusText}"؟`)) {
            var btn = $('#updateStatusBtn');
            var originalText = btn.html();
            
            // Show loading state
            btn.html('<span class="spinner-border spinner-border-sm me-2"></span>جاري التحديث...');
            btn.prop('disabled', true);
            
            // Submit form
            $.ajax({
                url: '@Url.Action("UpdateStatus", "Research")',
                type: 'POST',
                data: {
                    researchId: @Model.Research.Id,
                    newStatus: newStatus,
                    notes: notes,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        // Show success message
                        showToast('نجح التحديث', 'تم تحديث حالة البحث بنجاح', 'success');
                        
                        // Close modal
                        $('#statusModal').modal('hide');
                        
                        // Reload page after short delay
                        setTimeout(function() {
                            window.location.reload();
                        }, 1500);
                    } else {
                        showToast('فشل التحديث', response.message || 'حدث خطأ في تحديث الحالة', 'error');
                        btn.html(originalText);
                        btn.prop('disabled', false);
                    }
                },
                error: function(xhr, status, error) {
                    showToast('خطأ', 'حدث خطأ في الاتصال بالخادم', 'error');
                    btn.html(originalText);
                    btn.prop('disabled', false);
                }
            });
        }
    });

    // Reset form when modal is hidden
    $('#statusModal').on('hidden.bs.modal', function() {
        $('#statusForm')[0].reset();
        $('#statusPreview').addClass('d-none');
        $('#statusWarning').addClass('d-none');
        $('#newStatus').removeClass('is-invalid');
        $('#updateStatusBtn').prop('disabled', true);
    });
});

function getStatusBadgeClass(statusValue) {
    var statusClasses = {
        '1': 'bg-info',      // Submitted
        '2': 'bg-warning',   // UnderInitialReview
        '3': 'bg-primary',   // AssignedForReview
        '4': 'bg-primary',   // UnderReview
        '5': 'bg-warning',   // UnderEvaluation
        '6': 'bg-warning',   // RequiresMinorRevisions
        '7': 'bg-warning',   // RequiresMajorRevisions
        '8': 'bg-info',      // RevisionsSubmitted
        '9': 'bg-primary',   // RevisionsUnderReview
        '10': 'bg-success',  // Accepted
        '11': 'bg-danger',   // Rejected
        '12': 'bg-secondary', // Withdrawn
        '13': 'bg-info'      // AwaitingFourthReviewer
    };
    
    return statusClasses[statusValue] || 'bg-secondary';
}

function showStatusWarnings(statusValue) {
    var warnings = {
        '11': 'تنبيه: رفض البحث سيؤدي إلى إرسال إشعار للباحث ولن يمكن التراجع عن هذا القرار بسهولة.',
        '10': 'تنبيه: قبول البحث سيؤدي إلى إرسال إشعار للباحث وبدء عملية النشر.',
        '6': 'سيتم إرسال إشعار للباحث بضرورة إجراء تعديلات طفيفة.',
        '7': 'سيتم إرسال إشعار للباحث بضرورة إجراء تعديلات جوهرية.'
    };
    
    if (warnings[statusValue]) {
        $('#warningMessage').text(warnings[statusValue]);
        $('#statusWarning').removeClass('d-none');
    } else {
        $('#statusWarning').addClass('d-none');
    }
}

function showToast(title, message, type) {
    var alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
    var icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle';
    
    var toast = $(`
        <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
             style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
            <i class="fas ${icon} me-2"></i>
            <strong>${title}:</strong> ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `);
    
    $('body').append(toast);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        toast.alert('close');
    }, 5000);
}
</script>
}


